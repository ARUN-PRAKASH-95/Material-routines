function [sig3,A33,sdvl]=subroutine_planestress(eps3,sdvl,ttype)tol=1e-8;% material parametersmatp      = inputmat();xE        = matp(1);            % Young's modulusxnu       = matp(2);            % Poisson's ratioxsigy0    = matp(3);            % initial yield stress% restore the strain tensor in voigt notationeps = [eps3(1); eps3(2); eps3(3);];% restore the internal variables at tndamage  = sdvl;C = zeros(3,3);const = xE/(1 - xnu**2);% ELastic stiffness matix (6*6)C(1,1) = const;C(1,2) = const*xnu;C(1,3) = 0;C(2,1) = const*xnu;C(2,2) = const;C(2,3) = 0;C(3,1) = 0;C(3,2) = 0;C(3,3) = const*(1 - xnu);C% Maximum failure strain in 11 directionepsilon_f = xsigy0 / C(1,1);% Create an empty stress vectorsig3 = zeros(3,1);eta = 1e-5;P = 2500;               %parameter in damage evolution%Check if the strain in 11 direction is smaller than failure strainif norm(eps(1)) < epsilon_f      % Compute stress using Hookes law  for i = 1:3    for j = 1:3      sig3(i) = sig3(i) +  ((1+eta-damage)*C(i,j)*eps(j));  % At the beginning of loading damage will be zero, while unloading damage value is the value recorded during the end of tensile loading          end  end  C_T =  (1 + eta - damage)*C;  elseif norm(eps(1)) >= epsilon_f    damage_new = 1 - (exp(-(eps(1)-epsilon_f)*P));    % Damage evolution  % To make sure the damage evolution is greater than or equal to zero  if damage_new >= damage    damage = damage_new;  else    damage = damage;  end
    %fprintf('Current damage value %f\n', damage);   for i = 1:3    for j = 1:3      sig3(i) = sig3(i) +  ((1 + eta - damage)*C(i,j)*eps(j));    end  end    %%%%%%%%%   Tangent stiffness   %%%%%%%%%   a = (1 + eta - damage)*C;    % Second term of the tangent stiffness  b1 = P*exp(-P*(eps(1)-epsilon_f));     % partial derivative of damage w.r.t to e11  b2 = [1;0;0;];                    % partial derivative of e11 w.r.t to strain tensor    b = b1*b2;    c = C*eps;                             %Double contration of 4th order C with 2nd order strain tensor    d = c*b';                              %Dyadic product of above two terms(c and d)      %Tangent stiffness  C_T = a - d;end%sig6%fprintf('s11 %f\n', sig6(1));%fprintf('C11 %f\n', C(1,1));%fprintf('C12 %f\n', C(1,2));%fprintf('C13 %f\n', C(1,3));%fprintf('eps11 %f\n', eps_tensor(1,1));%fprintf('eps22 %f\n', eps_tensor(2,2));%fprintf('eps33 %f\n', eps_tensor(3,3));%fprintf('damage %f\n', damage);%fprintf('ef %f\n', epsilon_f);%fprintf('************************\n');A33=zeros(3,3);if ttype==0    for i=1:3        for j=1:3        A33(i,j) = C_T(i,j);        end    endelseif ttype == 1    hper=1e-8;    %perturbation of the strain entries (here total strain, maybe this has to be modified)    for ieps=1:1:length(eps3)        epsper=eps3;        epsper(ieps)=epsper(ieps)+hper;        %recursiv call of your material routine with ttype=0 to avoid        %endless loop        %Calculate perturbed stress, sdv are not overwritten        [sig3per,Adummy,sdvldummy]=subroutine_planestress(epsper,sdvl,0);        %Simple differential quotient        A33_num(:,ieps)=(sig3per-sig3)/hper;            end    A33=A33_num;end%end% store history variablessdvl = damage;end