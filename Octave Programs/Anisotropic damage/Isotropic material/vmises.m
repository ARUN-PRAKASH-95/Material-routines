function [sig6,A66,sdvl]=vmises(eps6,sdvl,ttype)tol=1e-8;% material parametersmatp      = inputmat();xE        = matp(1)            % Young's modulusxnu       = matp(2);            % Poisson's ratioxsigy0    = matp(3);            % initial yield stressxk        = xE/(3*(1-2*xnu));   % bulk modulus% Lames constantslambda  =  xE * xnu / ((1 + xnu) * (1 - 2*xnu));xmu  = xE/(2*(1+xnu));     % shear modulus% restore the strain tensor in voigt notationeps = [eps6(1); eps6(2); eps6(3); eps6(4); eps6(5); eps6(6);];% restore the strain tensoreps_tensor = [eps6(1) eps6(4)/2 eps6(6)/2;              eps6(4)/2 eps6(2) eps6(5)/2;              eps6(6)/2 eps6(5)/2 eps6(3)];% restore the internal variables at tndamage  = sdvl;%fprintf('previous damage value %f\n', damage );C = zeros(6,6);% ELastic stiffness matix (6*6)C(1,1) = (lambda + 2*xmu)*(1 - d1)**2;C(1,2) = lambda*(1 - d1)*(1 - d2);C(1,3) = lambda*(1 - d1)*(1 - d3);C(1,4) = 0;C(1,5) = 0;C(1,6) = 0;C(2,1) = lambda*(1 - d1)*(1 - d2);C(2,2) = (lambda + 2*xmu)*(1 - d2)**2;C(2,3) = lambda*(1 - d3)*(1 - d2);C(2,4) = 0;C(2,5) = 0;C(2,6) = 0;C(3,1) = lambda*(1 - d3)*(1 - d1);C(3,2) = lambda*(1 - d3)*(1 - d2);C(3,3) = (lambda + 2*xmu)*(1 - d3)**2;C(3,4) = 0;C(3,5) = 0;C(3,6) = 0;C(4,1) = 0;C(4,2) = 0;C(4,3) = 0;C(4,4) = xmu*(1 - d1)*(1 - d2);C(4,5) = 0;C(4,6) = 0;C(5,1) = 0;C(5,2) = 0;C(5,3) = 0;C(5,4) = 0;C(5,5) = xmu*(1 - d1)*(1 - d3);C(5,6) = 0;C(6,1) = 0;C(6,2) = 0;C(6,3) = 0;C(6,4) = 0;C(6,5) = 0;C(6,6) = xmu*(1 - d3)*(1 - d2);%  Damage initiation criteria %if eps(1) > 0  F_f  =  sqrt((eps(1)/eps_11_f_t)**2 + (eps(4)/eps_12_f)**2 + (eps(5)/eps_13_f)**2);elseif eps(1) < 0     F_f  =  sqrt((eps(1)/eps_11_f_c)**2);  endifif eps(2)+eps(3) > 0    F_m  =   sqrt(((eps(2)+eps(3))**2/(eps_22_f_t*eps_33_f_t)) -  (eps(2)*eps(3)/eps_23_f**2) +  (eps(4)/eps_12_f)**2 + (eps(5)/eps_13_f)**2 + (eps(6)/eps_23_f)**2)elseif eps(2)+eps(3) < 0  F_m  =  sqrt(((eps(2)+eps(3))**2/(eps_22_f_c*eps_33_f_c)) + ((eps(2)+eps(3)/eps_22_f_c)*( (eps_22_f_c/2*eps_12_f)  - 1))   -  (eps(2)*eps(3)/eps_23_f**2) +  (eps(4)/eps_12_f)**2 + (eps(5)/eps_13_f)**2 + (eps(6)/eps_23_f)**2)endifif eps(1) > 0  F_z  =  sqrt((eps(3)/eps_33_f_t)**2 + (eps(5)/eps_13_f)**2 + (eps(6)/eps_23_f)**2);elseif eps(1) < 0  F_z  =  sqrt((eps(3)/eps_33_f_c)**2 + (eps(5)/eps_13_f)**2 + (eps(6)/eps_23_f)**2);  endif% Create an empty stress vectorsig6 = zeros(6,1);%%%%%%%%  Check whether damage has initiated or not  %%%%%%%%%if F_f**2<0 and F_m**2<0 and F_z**2<0      % Compute stress using Hookes law  %    for i = 1:6       for j = 1:6          sig6(i) = sig6(i) + C(i,j)*eps(j);        end    end      A66=zeros(6,6);% restore stiffness tensor as matrixii = [1,2,3,1,2,1];jj = [1,2,3,2,3,3];if ttype==0    for i=1:6        for j=1:6        A66(i,j) = C_T(i,j);        end    endelseif ttype == 1    hper=1e-8;    %perturbation of the strain entries (here total strain, maybe this has to be modified)    for ieps=1:1:length(eps6)        epsper=eps6;        epsper(ieps)=epsper(ieps)+hper;        %recursiv call of your material routine with ttype=0 to avoid        %endless loop        %Calculate perturbed stress, sdv are not overwritten        [sig6per,Adummy,sdvldummy]=vmises(epsper,sdvl,0);        %Simple differential quotient        A66_num(:,ieps)=(sig6per-sig6)/hper;            end    A66=A66_num;end%end% store history variablessdvl = damage;end