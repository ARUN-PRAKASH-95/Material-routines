function [sig6,A66,sdvl]=vmises_tan(eps6,sdvl,ttype)tol=1e-8;% material parametersmatp      = inputmat();xE        = matp(1);                 % Young's modulusxnu       = matp(2);                 % Poisson's ratioxsigy0    = matp(3);                 % initial yield stressG_c_1 = G_c_2 = G_c_3 = matp(4);    % Fracture energyL_c   = matp(5);xk        = xE/(3*(1-2*xnu));         % bulk moduluseps_11_f_t  = eps_11_f_c = xsigy0/xE;eps_22_f_t  = eps_22_f_c = xsigy0/xE;eps_33_f_t  = eps_33_f_c = xsigy0/xE;eps_12_f    = eps_13_f   = eps_23_f  = xsigy0/xE;sig_11_f = sig_22_f = sig_33_f = xsigy0;% Lames constantslambda  =  xE * xnu / ((1 + xnu) * (1 - 2*xnu));xmu  = xE/(2*(1+xnu));     % shear modulus% restore the strain tensor in voigt notationeps = [eps6(1); eps6(2); eps6(3); eps6(4); eps6(5); eps6(6);];% restore the strain tensoreps_tensor = [eps6(1) eps6(4)/2 eps6(6)/2;              eps6(4)/2 eps6(2) eps6(5)/2;              eps6(6)/2 eps6(5)/2 eps6(3)];              % restore the internal variables at tnd1  = sdvl(1);d2  = sdvl(2);d3  = sdvl(3);C = zeros(6,6);% Elastic stiffness matix (6*6)C(1,1) = (lambda + 2*xmu)*(1 - d1)**2;C(1,2) = lambda*(1 - d1)*(1 - d2);C(1,3) = lambda*(1 - d1)*(1 - d3);C(1,4) = 0;C(1,5) = 0;C(1,6) = 0;C(2,1) = lambda*(1 - d1)*(1 - d2);C(2,2) = (lambda + 2*xmu)*(1 - d2)**2;C(2,3) = lambda*(1 - d3)*(1 - d2);C(2,4) = 0;C(2,5) = 0;C(2,6) = 0;C(3,1) = lambda*(1 - d3)*(1 - d1);C(3,2) = lambda*(1 - d3)*(1 - d2);C(3,3) = (lambda + 2*xmu)*(1 - d3)**2;C(3,4) = 0;C(3,5) = 0;C(3,6) = 0;C(4,1) = 0;C(4,2) = 0;C(4,3) = 0;C(4,4) = xmu*(1 - d1)*(1 - d2);C(4,5) = 0;C(4,6) = 0;C(5,1) = 0;C(5,2) = 0;C(5,3) = 0;C(5,4) = 0;C(5,5) = xmu*(1 - d1)*(1 - d3);C(5,6) = 0;C(6,1) = 0;C(6,2) = 0;C(6,3) = 0;C(6,4) = 0;C(6,5) = 0;C(6,6) = xmu*(1 - d3)*(1 - d2);%  Damage initiation criteria %if eps(1) > 0  F_f  =  sqrt((eps(1)/eps_11_f_t)**2 + (eps(4)/eps_12_f)**2 + (eps(6)/eps_13_f)**2);elseif eps(1) < 0     F_f  =  sqrt((eps(1)/eps_11_f_c)**2);  endifif eps(2)+eps(3) >= 0    F_m  =   sqrt(((eps(2)+eps(3))**2/(eps_22_f_t*eps_33_f_t)) -  (eps(2)*eps(3)/eps_23_f**2) +  (eps(4)/eps_12_f)**2 + (eps(6)/eps_13_f)**2 + (eps(5)/eps_23_f)**2);elseif eps(2)+eps(3) < 0  F_m  =  sqrt(((eps(2)+eps(3))**2/(eps_22_f_c*eps_33_f_c)) + ((eps(2)+eps(3)/eps_22_f_c)*( (eps_22_f_c/2*eps_12_f)  - 1))   -  (eps(2)*eps(3)/eps_23_f**2) +  (eps(4)/eps_12_f)**2 + (eps(6)/eps_13_f)**2 + (eps(5)/eps_23_f)**2);endifif eps(3) >= 0  F_z  =  sqrt((eps(3)/eps_33_f_t)**2 + (eps(6)/eps_13_f)**2 + (eps(5)/eps_23_f)**2);elseif eps(3) < 0  F_z  =  sqrt((eps(3)/eps_33_f_c)**2 + (eps(6)/eps_13_f)**2 + (eps(5)/eps_23_f)**2);  endif% Create an empty stress vectorsig6 = zeros(6,1);%%%%%%%%  Check whether damage has initiated or not  %%%%%%%%%if F_f**2<1 && F_m**2<1 && F_z**2<1      % Compute stress using Hookes law  %    for i = 1:6       for j = 1:6          sig6(i) = sig6(i) + C(i,j)*eps(j);        end    end        C_T_A  =  C;        else%%%%%%  Terms in damage evolution equations  %%%%%%%%        k1 =  (-sig_11_f*eps_11_f_t*L_c)/G_c_1;        k2 =  (-sig_22_f*eps_22_f_t*L_c)/G_c_2;        k3 =  (-sig_33_f*eps_33_f_t*L_c)/G_c_3;                    if F_f**2 >= 1            d1_new =  1  - (exp(k1*(F_f - 1)))/F_f;            if d1_new >= d1          d1 = d1_new;      else          d1 = d1;      end          endif        if F_m**2 >= 1            d2_new =  1  - (exp(k2*(F_m - 1)))/F_m;            if d2_new >= d2          d2 = d2_new;      else          d2 = d2;      end       endif            if F_z**2 >= 1            d3_new =  1  - (exp(k3*(F_z - 1)))/F_z;            if d3_new >= d3          d3 = d3_new;      else          d3 = d3;      end    endif            if d1 == 0            C_T_1 = zeros(6,6);          else          %%%%%%%%% First term of tangent stiffness C_T_1  %%%%%%%%%%      d_C_d_d1  =  zeros(6,6);      d_C_d_d1(1,1) = -2*(lambda + 2*xmu)*(1 - d1);      d_C_d_d1(1,2) = lambda*(d2 - 1);      d_C_d_d1(1,3) = lambda*(d3 - 1);      d_C_d_d1(2,1) = lambda*(d2 - 1);      d_C_d_d1(3,1) = lambda*(d3 - 1);      d_C_d_d1(4,4) = xmu*(d2 -1);      d_C_d_d1(5,5) = xmu*(d3 -1);      C_T_1_a  =  d_C_d_d1*eps;          %%%%%% Double contraction between d_C_d/d1 and strain tensor %%%%%%%%      %C_T_1_a      if eps(1) > 0        C_T_1_b  = [ ((1 - k1*F_f)/(F_f**3 * eps_11_f_t**2))*exp(k1*(F_f - 1))*eps(1); 0; 0; ((1 - k1*F_f)/(F_f**3 * eps_12_f**2))*exp(k1*(F_f - 1))*eps(4); 0; ((1 - k1*F_f)/(F_f**3 * eps_13_f**2))*exp(k1*(F_f - 1))*eps(6); ];      elseif eps(1) < 0        C_T_1_b  =  [ ((1 - k1*F_f)/(F_f**2 * eps_11_f_c))*exp(k1*(F_f - 1)); 0; 0; 0; 0; 0;];             endif              C_T_1  =  C_T_1_a*C_T_1_b';    endif
        if d2 == 0            C_T_2  =  zeros(6,6);          else      %%%%%%%%% Second term C_T_2  %%%%%%%%%%      d_C_d_d2  =  zeros(6,6);      d_C_d_d2(1,2) = lambda*(d1 - 1);      d_C_d_d2(2,1) = lambda*(d1 - 1);       d_C_d_d2(2,2) = -2*(lambda + 2*xmu)*(1 - d2);      d_C_d_d2(2,3) = lambda*(d3 - 1);         d_C_d_d2(3,2) = lambda*(d3 - 1);      d_C_d_d2(4,4) = xmu*(d1 - 1);      d_C_d_d2(6,6) = xmu*(d3 - 1);      C_T_2_a  =  d_C_d_d2*eps;          %%%%%% Double cntraction between d_C_d/d2 and strain tensor %%%%%%%%      if eps(2) + eps(3) > 0                term1  =  (2*(eps(2) + eps(3))/(eps_22_f_t*eps_33_f_t))  -  (eps(3)/eps_23_f**2);        term2  =  (2*(eps(2) + eps(3))/(eps_22_f_t*eps_33_f_t))  -  (eps(2)/eps_23_f**2);                        C_T_2_b  = [0; 0.5*((1 - k2*F_m)/(F_m**3))*exp(k2*(F_m - 1))*term1; 0.5*((1 - k2*F_m)/(F_m**3))*exp(k2*(F_m - 1))*term2; ((1 - k2*F_m)/(F_m**3 * eps_12_f**2))*exp(k2*(F_m - 1))*eps(4); ((1 - k2*F_m)/(F_m**3 * eps_23_f**2))*exp(k2*(F_m - 1))*eps(5); ((1 - k2*F_m)/(F_m**3 * eps_13_f**2))*exp(k2*(F_m - 1))*eps(6);];                      elseif eps(2) + eps(3) < 0                        term1 =  ((2*(eps(2) + eps(3))/(eps_22_f_t*eps_33_f_t))  +  ((eps_22_f_c/(2*eps_12_f)) - 1)/eps_22_f_c   -  (eps(3)/eps_23_f**2))/(2*F_m);          term2 =  ((2*(eps(2) + eps(3))/(eps_22_f_t*eps_33_f_t))  +  ((eps_22_f_c/(2*eps_12_f)) - 1)/eps_22_f_c   -  (eps(2)/eps_23_f**2))/(2*F_m);        C_T_2_b  =  [0;  ((1 - k2*F_m)/(F_m**2))*exp(k2*(F_m - 1))*term1; ((1 - k2*F_m)/(F_m**2))*exp(k2*(F_m - 1))*term2; ((1 - k2*F_m)/(F_m**3 * eps_12_f**2))*exp(k2*(F_m - 1))*eps(4); ((1 - k2*F_m)/(F_m**3 * eps_23_f**2))*exp(k2*(F_m - 1))*eps(5); ((1 - k2*F_m)/(F_m**3 * eps_13_f**2))*exp(k2*(F_m - 1))*eps(6);];                endif      C_T_2  =  C_T_2_a*C_T_2_b';        endif
       if d3  == 0          C_T_3  =  zeros(6,6);   else             %%%%%%%%% Third term C_T_3  %%%%%%%%%%            d_C_d_d3  =  zeros(6,6);            d_C_d_d3(1,3)  =  lambda*(d1 - 1);      d_C_d_d3(2,3)  =  lambda*(d2 - 1);      d_C_d_d3(3,1)  =  lambda*(d1 - 1);      d_C_d_d3(3,2)  =  lambda*(d2 - 1);      d_C_d_d3(3,3)  =  -2*(lambda + 2*xmu)*(1 - d3);      d_C_d_d3(5,5)  =  xmu*(d1 - 1);      d_C_d_d3(6,6)  =  xmu*(d2 - 1);            C_T_3_a  =  d_C_d_d3*eps;          %%%%%% Double cntraction between d_C_d/d3 and strain tensor %%%%%%%%            if eps(3) > 0                 C_T_3_b = [0; 0; ((1 - k3*F_z)/(F_z**3 * eps_33_f_t**2))*exp(k3*(F_z - 1))*eps(3); 0; ((1 - k3*F_z)/(F_z**3 * eps_23_f**2))*exp(k3*(F_z - 1))*eps(5);  ((1 - k3*F_z)/(F_z**3 * eps_13_f**2))*exp(k3*(F_z - 1))*eps(6);];              elseif eps(3) < 0                C_T_3_b = [0; 0; ((1 - k3*F_z)/(F_z**3 * eps_33_f_c**2))*exp(k3*(F_z - 1))*eps(3); 0; ((1 - k3*F_z)/(F_z**3 * eps_23_f**2))*exp(k3*(F_z - 1))*eps(5);  ((1 - k3*F_z)/(F_z**3 * eps_13_f**2))*exp(k3*(F_z - 1))*eps(6);];      endif                  C_T_3  =  C_T_3_a*C_T_3_b';         endif             % Compute stress using Hookes law  %    for i = 1:6       for j = 1:6          sig6(i) = sig6(i) + C(i,j)*eps(j);        end    end              %%%%%%%%%  Tangent stiffness %%%%%%%%%  C_T_A  =  C  + C_T_1 + C_T_2 + C_T_3; endif        if ttype==0      for i=1:6        for j=1:6        A66(i,j) = C_T_A(i,j);        end    end    A66hper=1e-8;%perturbation of the strain entries (here total strain, maybe this has to be modified)for ieps=1:1:length(eps6)    epsper=eps6;    epsper(ieps)=epsper(ieps)+hper;    %recursiv call of your material routine with ttype=0 to avoid    %endless loop    %Calculate perturbed stress, sdv are not overwritten    [sig6per,Adummy,sdvldummy]=vmises_tan(epsper,sdvl,0);    sig6per    %Simple differential quotient    A66_num(:,ieps)=(sig6per-sig6)/hper;    endA66=A66_num;% store history variablessdvl(1) = d1;sdvl(2) = d2;sdvl(3) = d3;end