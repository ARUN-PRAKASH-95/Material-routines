function [sig3,A66,sdvl]=vmises(eps3,sdvl,ttype)%%%% material parameters %%%%matp       = inputmat();young_x    = matp(1);young_y    = matp(2);pr_xy      = matp(3);g_xy       = matp(4);g_yz       = matp(5);X_T        = matp(6);X_C        = matp(7);Y_T        = matp(8);Y_C        = matp(9);S_L        = matp(10);G_f_t      = matp(11);G_f_c      = matp(12);G_m_t      = matp(13);G_m_c      = matp(14);L_c        = matp(15);alpha      =  1;pr_yx = (young_y * pr_xy) / young_x;% restore the strain tensor in voigt notationeps = [eps3(1); eps3(2); eps3(3);];              % restore the internal variables at tndf  = sdvl(1);dm  = sdvl(2);ds  = 1 - ((1 - df)*(1 - dm));F_f = sdvl(3);F_m = sdvl(4);D   =  1 - (1 - df)*(1 - dm)*pr_xy*pr_yx;C = zeros(3,3);% Elastic stiffness matix (6*6)C(1,1) = (1 - df)*young_x;C(1,2) = (1 - df)*(1 - dm)*pr_yx*young_x;C(1,3) = 0;C(2,1) = (1 - df)*(1 - dm)*pr_xy*young_y;C(2,2) = (1 - dm)*young_y;C(2,3) = 0;C(3,1) = 0;C(3,2) = 0;C(3,3) = D*(1 - ds)*g_xy;C = (1/D)*C;%%%%%%%%    Calculate stress    %%%%%%%% % Create an empty stress vectorsig3 = zeros(3,1);  for i = 1:3   for j = 1:3      sig3(i) = sig3(i) + C(i,j)*eps(j);    endend     %%%%%%%%%%   Calculate effective stress    %%%%%%%%%     %%% Damage operator M  %%% M  = zeros(3,3);M(1,1)  =  1/(1 - df);M(2,2)  =  1/(1 - dm);M(3,3)  =  1/(1 - ds); % Create an empty stress vectorsig3_eff = zeros(3,1);    for i = 1:3   for j = 1:3      sig3_eff(i) = sig3_eff(i) + M(i,j)*sig3(j);    endend       %%%%%%%%%  Damage initation criteria  %%%%%%%%%%%%%%%%  Fibre tension and compressionif sig3_eff(1) >= 0    F_f_new =  (sig3_eff(1)/X_T)**2   + alpha*(sig3_eff(3)/S_L)**2;  else   F_f_new =  (sig3_eff(1)/X_C)**2;  endif%%%%%%%  Matrix tension and compression if sig3_eff(2)>=0    F_m_new  =  (sig3_eff(2)/Y_T)**2   + (sig3_eff(3)/S_L)**2;   else  F_m_new  =  (sig3_eff(2)/2*S_L)**2  + ((Y_C/2*S_L)**2 - 1)*(sig3_eff(2)/Y_C)  +  (sig3_eff(3)/S_L)**2;  endif  %%%%%%%% To make sure damage initiation criteria is greater than or equal to previous step  %%%%%%%%%%if F_f_new >= F_f    F_f = F_f_new;else    F_f = F_f;endif F_m_new >= F_m    F_m = F_m_new;else    F_m = F_m;end  if  F_f<1  && F_m<1       sig3   = sig3;     C_T  =  C;else        %%%%%%%  Fibre tension and compression    if sig3_eff(1) >= 0            Del_eq_f  =  L_c*sqrt(Macauly(eps(1))**2 + alpha*eps(3)**2);      sig_eq_f  =  (L_c*(Macauly(sig3(1))*Macauly(eps(1))  +   alpha*sig3(3)*eps(3)))/Del_eq_f;      f_f_sc    =  1/sqrt(F_f);        else        Del_eq_f  =  L_c*Macauly(-eps(1));      sig_eq_f  =  L_c*(Macauly(-sig3(1))*Macauly(-eps(1)))/Del_eq_f;      f_f_sc_sc =  1/sqrt(F_f);        endif              %%%%%%%  Matrix tension and compression    if sig3_eff(2) >= 0            Del_eq_m    =  L_c*sqrt(Macauly(eps(2))**2 + eps(3)**2);      sig_eq_m    =  (L_c*( Macauly(sig3(2))*Macauly(eps(2))  +   sig3(3)*eps(3) ))/Del_eq_m;      f_m_sc      =  1/sqrt(F_m);        else        Del_eq_m  =  L_c*sqrt(Macauly(-eps(2))**2 + eps(3)**2);      sig_eq_m  =  L_c*( Macauly(-sig3(2))*Macauly(-eps(2) +   sig3(3)*eps(3) ))/Del_eq_m;      gamma     =  ((Y_C/2*S_L)**2 - 1)*(sig3_eff(2)/Y_C);      beta      =  (sig3_eff(2)/2*S_L)**2   +  (sig3_eff(3)/S_L)**2;      f_m_sc    =  (-gamma  + sqrt(gamma**2  + 4*beta))/2*beta;        endif          %%% Damage variable df     if F_f >= 1             fprintf('yes');            Del_eq_0_f  = Del_eq_f*f_f_sc;       sig_eq_0_f  = sig_eq_f*f_f_sc;      Del_eq_f_f  = 2*G_f_c/sig_eq_0_f;                         df_new  =  (Del_eq_f_f*(Del_eq_f  - Del_eq_0_f))/(Del_eq_f*(Del_eq_f_f  - Del_eq_0_f))            if df_new > df        df = df_new;      else        df = df;      endif
          endif        %%% Damage variable dm     if F_m >=1              Del_eq_0_m = Del_eq_m*f_m_sc;       sig_eq_0_m  = sig_eq_m*f_m_sc;      Del_eq_f_m = 2*G_m_c/sig_eq_0_m;              dm_new  =  (Del_eq_f_m*(Del_eq_m  - Del_eq_0_m))/(Del_eq_m*(Del_eq_f_m  - Del_eq_0_m));             if dm_new > dm        dm = dm_new;      else        dm = dm;      endif        endif         %%% Damage variable ds       ds  = 1  - ( 1 - df)*(1 - dm);         %%%%  Degraded  stiffness    D_d   =  1 - (1 - df)*(1 - dm)*pr_xy*pr_yx;    C_d = zeros(3,3);    % Elastic stiffness matix (6*6)    C_d(1,1) = (1 - df)*young_x;    C_d(1,2) = (1 - df)*(1 - dm)*pr_yx*young_x;    C_d(1,3) = 0;    C_d(2,1) = (1 - df)*(1 - dm)*pr_xy*young_y;    C_d(2,2) = (1 - dm)*young_y;    C_d(2,3) = 0;    C_d(3,1) = 0;    C_d(3,2) = 0;    C_d(3,3) = D_d*(1 - ds)*g_xy;    C_d = (1/D_d)*C_d;  %%%%%%%%% First term C_T_1 ((d_C_d/df : eps) outerProduct (d_df/d_epsilon))   %%%%%%%%%%    if df == 0            C_T_f = zeros(3,3);          else           d_C_d_df  =  zeros(3,3);            d_C_d_df(1,1)  =   (D_d*-young_x   - ((1 - df)*(1 - dm)*young_x*pr_xy*pr_yx))/D_d**2;      d_C_d_df(1,2)  =   (D_d*(dm - 1)*pr_xy*young_x  - ((1 - df)*(1 - dm)*pr_yx*young_x*(1 - dm)*pr_xy*pr_yx))/D_d**2;      d_C_d_df(2,1)  =   (D_d*(dm - 1)*pr_xy*young_x  - ((1 - df)*(1 - dm)*pr_yx*young_x*(1 - dm)*pr_xy*pr_yx))/D_d**2;      d_C_d_df(2,2)  =   -((1 - dm)**2*young_y*pr_xy*pr_yx)/D_d**2;      d_C_d_df(3,3)  =   (1 - dm)*g_xy;        %%%%  (d_C_d/df : eps)  %%%%%      C_T_f_a = zeros(3,1);      for i = 1:3         for j = 1:3            C_T_f_a(i) = C_T_f_a(i) + d_C_d_df(i,j)*eps(j);          end      end               %%%%%%%%%%%%%%%%   Derivative of df with respect to strain (d_df/d_epsilon)  %%%%%%%%%%%%%            %%%%%%   For Tension   %%%%%%       if sig3_eff(1) >= 0                    term1 = eps(1)+abs(eps(1));          term2 = ( 1 + (eps(1)/abs(eps(1)))  );                      C_T_f_b  =   [ (L_c*term1 * term2)/(4* sqrt( term1**2/4  +  alpha*eps(3)**2  )); 0;  L_c*alpha*eps(3)/sqrt( Macauly(eps(1))**2 +  alpha*eps(3)**2  );     ];            %%%%%%   For Compression   %%%%%%        else                    C_T_f_b  = [L_c*( (eps(1)/abs(eps(1)))  -  1)/2; 0; 0;];                      endif               C_T_f  = C_T_f_a*C_T_f_b';        endif    %%%%%%%%% Second term C_T_m ((d_C_d/dm : eps) outerProduct (d_dm/d_epsilon))   %%%%%%%%%%           if dm == 0      C_T_m = zeros(3,3);    else           d_C_d_dm  =  zeros(3,3);       d_C_d_dm(1,1)  =   -((1 - df)**2*young_y*pr_xy*pr_yx)/D_d**2;      d_C_d_dm(1,2)  =   (D_d*(df - 1)*pr_xy*young_x  - ((1 - df)*(1 - dm)*pr_yx*young_x*(1 - df)*pr_xy*pr_yx))/D_d**2;      d_C_d_dm(2,1)  =   (D_d*(df - 1)*pr_xy*young_x  - ((1 - df)*(1 - dm)*pr_yx*young_x*(1 - df)*pr_xy*pr_yx))/D_d**2;      d_C_d_dm(2,2)  =   (D_d*-young_y   - ((1 - df)*(1 - dm)*young_y*pr_xy*pr_yx))/D_d**2;      d_C_d_dm(3,3)  =   (1 - df)*g_xy;    %%%%  (d_C_d/df : eps)  %%%%%      C_T_m_a = zeros(3,1);      for i = 1:3         for j = 1:3            C_T_m_a(i) = C_T_m_a(i) + d_C_d_dm(i,j)*eps(j);          end      end       %%%%%%%%%%%%%%%%   Derivative of dm with respect to strain (d_dm/d_epsilon)  %%%%%%%%%%%%%            %%%%%%   For Tension   %%%%%%      if sig3_eff(2) >= 0          term3 = eps(2)+abs(eps(2));          term4 = ( 1 + (eps(2)/abs(eps(2)))  );                 C_T_m_b  =   [0; (L_c*term3*term4)/(4* sqrt( term3**2/4  +  alpha*eps(3)**2  ));   L_c*eps(3)/sqrt(  Macauly(eps(2))**2  +   eps(3)**2  );];            %%%%%%   For Compression   %%%%%%      else                    term3 = -eps(2)+abs(eps(2));          term4 = ( -1 + (eps(2)/abs(eps(2)))  );          C_T_m_b  = [0;  (L_c*term3*term4)/(4* sqrt( term3**2/4  +  alpha*eps(3)**2  ));  L_c*eps(3)/sqrt(  Macauly(-eps(2))**2  +   eps(3)**2  );  ;];            endif      C_T_m  = C_T_m_a*C_T_m_b';        endif            %%%%%%%%% Third term C_T_s ((d_C_d/ds : eps) outerProduct (d_ds/d_epsilon))   %%%%%%%%%%        if ds == 0            C_T_s = zeros(3,3);          else           d_C_d_ds  =  zeros(3,3);            d_C_d_ds(3,3)  = -g_xy;          %%%%  (d_C_d/df : eps)  %%%%%      C_T_s_a = zeros(3,1);      for i = 1:3         for j = 1:3            C_T_s_a(i) = C_T_s_a(i) + d_C_d_ds(i,j)*eps(j);          end      end                      %%%%%%%%%%%%%%%%   Derivative of ds with respect to strain (d_ds/d_epsilon)  %%%%%%%%%%%%%            %%%%%%   For Tension   %%%%%%      if sig3_eff(3) >= 0                    term1 = eps(1)+abs(eps(1));          term2 = ( 1 + (eps(1)/abs(eps(1)))  );          term3 = eps(2)+abs(eps(2));          term4 = ( 1 + (eps(2)/abs(eps(2)))  );                 C_T_s_b  =   [(1-df)*(L_c*term1 * term2)/(4* sqrt( term1**2/4  +  alpha*eps(3)**2  ));  (1 - dm)*(L_c*term3*term4)/(4* sqrt( term3**2/4  +  alpha*eps(3)**2  ));   ((1 - df)* L_c*alpha*eps(3)/sqrt( Macauly(eps(1))**2 +  alpha*eps(3)**2  )) + (1 - dm)* L_c*eps(3)/sqrt(  Macauly(eps(2))**2  +   eps(3)**2  );];            %%%%%%   For Compression   %%%%%%      else                    term3 = -eps(2)+abs(eps(2));          term4 = ( -1 + (eps(2)/abs(eps(2)))  );          C_T_s_b  = [(1 - df)*L_c*( (eps(1)/abs(eps(1)))  -  1)/2;  (1 - dm)*(L_c*term3*term4)/(4* sqrt( term3**2/4  +  alpha*eps(3)**2  ));  (1 - dm)*L_c*eps(3)/sqrt(  Macauly(-eps(2))**2  +   eps(3)**2  );  ;];            endif      C_T_s  = C_T_s_a*C_T_s_b';        endif          % Compute stress using Hookes law  %    for i = 1:3       for j = 1:3          sig3(i) = sig3(i) + C_d(i,j)*eps(j);        end    end            C_T  = C_d  + C_T_f + C_T_m + C_T_s;    endif                   if ttype==0    for i=1:3        for j=1:3        A66(i,j) = C_T(i,j);        end    end        %%%%%%%%%%%   Numerical tangent   %%%%%%%%%%%%%%elseif ttype == 1    hper=1e-8;    %perturbation of the strain entries (here total strain, maybe this has to be modified)    for ieps=1:1:length(eps3)        epsper=eps3;        epsper(ieps)=epsper(ieps)+hper;        %recursiv call of your material routine with ttype=0 to avoid        %endless loop        %Calculate perturbed stress, sdv are not overwritten        [sig3per,Adummy,sdvldummy]=vmises(epsper,sdvl,0);        %Simple differential quotient        A66_num(:,ieps)=(sig3per-sig3)/hper;            end    A66=A66_num;        %vec = [1,2,3,4,5,6];        %PD_NT = vec*A66*vec'end% store history variablessdvl(1) = df;sdvl(2) = dm;sdvl(3) = F_f;sdvl(4) = F_m;end